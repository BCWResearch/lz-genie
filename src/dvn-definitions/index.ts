
// import fs from 'fs';
// import calls failing, so using require
const path = require('path');
const fs = require('fs');

import { MainnetEndpointId, MainnetV2EndpointId, TestnetV2EndpointId, TestnetEndpointId, SandboxEndpointId, SandboxV2EndpointId } from "@layerzerolabs/lz-definitions";
import { DVNDeployment, DVNNetworkMap } from "../interfaces/dvnDeployments";

const DVN_DEPLOYMENT_PATH = path.join(__dirname, './dvn-deployments.json');
const DVN_DEPLOYMENT: DVNDeployment = JSON.parse(fs.readFileSync(DVN_DEPLOYMENT_PATH, 'utf-8'));

const NETWORK_MAP: DVNNetworkMap = {
  "arbitrum": [MainnetEndpointId.ARBITRUM_MAINNET, MainnetV2EndpointId.ARBITRUM_V2_MAINNET],
  "avalanche": [MainnetEndpointId.AVALANCHE_MAINNET, MainnetV2EndpointId.AVALANCHE_V2_MAINNET],
  "bsc": [MainnetEndpointId.BSC_MAINNET, MainnetV2EndpointId.BSC_V2_MAINNET],
  "ethereum": [MainnetEndpointId.ETHEREUM_MAINNET, MainnetV2EndpointId.ETHEREUM_V2_MAINNET],
  "fantom": [MainnetEndpointId.FANTOM_MAINNET, MainnetV2EndpointId.FANTOM_V2_MAINNET],
  "optimism": [MainnetEndpointId.OPTIMISM_MAINNET, MainnetV2EndpointId.OPTIMISM_V2_MAINNET],
  "polygon": [MainnetEndpointId.POLYGON_MAINNET, MainnetV2EndpointId.POLYGON_V2_MAINNET],
  "blast": [MainnetEndpointId.BLAST_MAINNET, MainnetV2EndpointId.BLAST_V2_MAINNET],
  "fraxtal": [MainnetEndpointId.FRAXTAL_MAINNET, MainnetV2EndpointId.FRAXTAL_V2_MAINNET],
  "kava": [MainnetEndpointId.KAVA_MAINNET, MainnetV2EndpointId.KAVA_V2_MAINNET],
  "mantle": [MainnetEndpointId.MANTLE_MAINNET, MainnetV2EndpointId.MANTLE_V2_MAINNET],
  "scroll": [MainnetEndpointId.SCROLL_MAINNET, MainnetV2EndpointId.SCROLL_V2_MAINNET],
  "nova": [MainnetEndpointId.NOVA_MAINNET, MainnetV2EndpointId.NOVA_V2_MAINNET],
  "astar": [MainnetEndpointId.ASTAR_MAINNET, MainnetV2EndpointId.ASTAR_V2_MAINNET],
  "base": [MainnetEndpointId.BASE_MAINNET, MainnetV2EndpointId.BASE_V2_MAINNET],
  "canto": [MainnetEndpointId.CANTO_MAINNET, MainnetV2EndpointId.CANTO_V2_MAINNET],
  "conflux": [MainnetEndpointId.CONFLUX_MAINNET, MainnetV2EndpointId.CONFLUX_V2_MAINNET],
  "coredao": [MainnetEndpointId.COREDAO_MAINNET, MainnetV2EndpointId.COREDAO_V2_MAINNET],
  "dfk": [MainnetEndpointId.DFK_MAINNET, MainnetV2EndpointId.DFK_V2_MAINNET],
  "dexalot": [MainnetEndpointId.DEXALOT_MAINNET, MainnetV2EndpointId.DEXALOT_V2_MAINNET],
  "dos": [MainnetEndpointId.DOS_MAINNET, MainnetV2EndpointId.DOS_V2_MAINNET],
  "fuse": [MainnetEndpointId.FUSE_MAINNET, MainnetV2EndpointId.FUSE_V2_MAINNET],
  "eon": [MainnetEndpointId.EON_MAINNET, MainnetV2EndpointId.EON_V2_MAINNET],
  "klaytn": [MainnetEndpointId.KLAYTN_MAINNET, MainnetV2EndpointId.KLAYTN_V2_MAINNET],
  "loot": [MainnetEndpointId.LOOT_MAINNET, MainnetV2EndpointId.LOOT_V2_MAINNET],
  "manta": [MainnetEndpointId.MANTA_MAINNET, MainnetV2EndpointId.MANTA_V2_MAINNET],
  "beam": [MainnetEndpointId.MOONBEAM_MAINNET, MainnetV2EndpointId.MOONBEAM_V2_MAINNET],
  "meter": [MainnetEndpointId.METER_MAINNET, MainnetV2EndpointId.METER_V2_MAINNET],
  "metis": [MainnetEndpointId.METIS_MAINNET, MainnetV2EndpointId.METIS_V2_MAINNET],
  "moonriver": [MainnetEndpointId.MOONRIVER_MAINNET, MainnetV2EndpointId.MOONRIVER_V2_MAINNET],
  "aurora": [MainnetEndpointId.AURORA_MAINNET, MainnetV2EndpointId.AURORA_V2_MAINNET],
  "opbnb": [MainnetEndpointId.OPBNB_MAINNET, MainnetV2EndpointId.OPBNB_V2_MAINNET],
  "orderly": [MainnetEndpointId.ORDERLY_MAINNET, MainnetV2EndpointId.ORDERLY_V2_MAINNET],
  "sei": [MainnetEndpointId.SEI_MAINNET, MainnetV2EndpointId.SEI_V2_MAINNET],
  "shimmer": [MainnetEndpointId.SHIMMER_MAINNET, MainnetV2EndpointId.SHIMMER_V2_MAINNET],
  "telos": [MainnetEndpointId.TELOS_MAINNET, MainnetV2EndpointId.TELOS_V2_MAINNET],
  "tenet": [MainnetEndpointId.TENET_MAINNET, MainnetV2EndpointId.TENET_V2_MAINNET],
  "tomo": [MainnetEndpointId.TOMO_MAINNET, MainnetV2EndpointId.TOMO_V2_MAINNET],
  "xai": [MainnetEndpointId.XAI_MAINNET, MainnetV2EndpointId.XAI_V2_MAINNET],
  "xpla": [MainnetEndpointId.XPLA_MAINNET, MainnetV2EndpointId.XPLA_V2_MAINNET],
  "zksync": [MainnetEndpointId.ZKSYNC_MAINNET, MainnetV2EndpointId.ZKSYNC_V2_MAINNET],
  "zora": [MainnetEndpointId.ZORA_MAINNET, MainnetV2EndpointId.ZORA_V2_MAINNET],
  "arbitrum-sepolia": [TestnetEndpointId.ARBITRUM_TESTNET, TestnetV2EndpointId.ARBITRUM_V2_TESTNET],
  "astar-testnet": [TestnetEndpointId.ASTAR_TESTNET, TestnetV2EndpointId.ASTAR_V2_TESTNET],
  "fuji": [TestnetEndpointId.AVALANCHE_TESTNET, TestnetV2EndpointId.AVALANCHE_V2_TESTNET],
  "bsc-testnet": [TestnetEndpointId.BSC_TESTNET, TestnetV2EndpointId.BSC_V2_TESTNET],
  "bob": [MainnetEndpointId.BOB_MAINNET, MainnetV2EndpointId.BOB_V2_MAINNET],
  "holesky-testnet": [TestnetEndpointId.HOLESKY_TESTNET, TestnetV2EndpointId.HOLESKY_V2_TESTNET],
  "sepolia": [TestnetEndpointId.SEPOLIA_TESTNET, TestnetV2EndpointId.SEPOLIA_V2_TESTNET],
  "fantom-testnet": [TestnetEndpointId.FANTOM_TESTNET, TestnetV2EndpointId.FANTOM_V2_TESTNET],
  "chiado": [TestnetEndpointId.GNOSIS_TESTNET, TestnetV2EndpointId.GNOSIS_V2_TESTNET],
  "gnosis": [MainnetEndpointId.GNOSIS_MAINNET, MainnetV2EndpointId.GNOSIS_V2_MAINNET],
  "gravity": [MainnetEndpointId.GRAVITY_MAINNET, MainnetV2EndpointId.GRAVITY_V2_MAINNET],
  "iota": [MainnetEndpointId.IOTA_MAINNET, MainnetV2EndpointId.IOTA_V2_MAINNET],
  "linea": [TestnetEndpointId.LINEASEP_TESTNET, TestnetV2EndpointId.LINEASEP_V2_TESTNET],
  "mode": [MainnetEndpointId.MODE_MAINNET, MainnetV2EndpointId.MODE_V2_MAINNET],
  "moonbase": [TestnetEndpointId.MOONBEAM_TESTNET, TestnetV2EndpointId.MOONBEAM_V2_TESTNET],
  "moonbeam": [MainnetEndpointId.MOONBEAM_MAINNET, MainnetV2EndpointId.MOONBEAM_V2_MAINNET],
  "okx": [MainnetEndpointId.OKX_MAINNET, MainnetV2EndpointId.OKX_V2_MAINNET],
  "optimism-sepolia": [TestnetEndpointId.OPTIMISM_TESTNET, TestnetV2EndpointId.OPTIMISM_V2_TESTNET],
  "peaq": [MainnetEndpointId.PEAQ_MAINNET, MainnetV2EndpointId.PEAQ_V2_MAINNET],
  "zkevm": [MainnetEndpointId.ZKPOLYGON_MAINNET, MainnetV2EndpointId.ZKPOLYGON_V2_MAINNET],
  "scroll-testnet": [TestnetEndpointId.SCROLL_TESTNET, TestnetV2EndpointId.SCROLL_V2_TESTNET],
  "zklink": [MainnetEndpointId.ZKLINK_MAINNET, MainnetV2EndpointId.ZKLINK_V2_MAINNET],
  "celo": [MainnetEndpointId.CELO_MAINNET, MainnetV2EndpointId.CELO_V2_MAINNET],
  "harmony": [MainnetEndpointId.HARMONY_MAINNET, MainnetV2EndpointId.HARMONY_V2_MAINNET],
  "solana": [MainnetEndpointId.SOLANA_MAINNET, MainnetV2EndpointId.SOLANA_V2_MAINNET],
  "zkatana": [MainnetEndpointId.ZKATANA_MAINNET, MainnetV2EndpointId.ZKATANA_V2_MAINNET],
  "degen": [MainnetEndpointId.DEGEN_MAINNET, MainnetV2EndpointId.DEGEN_V2_MAINNET],
  "ebi": [MainnetEndpointId.EBI_MAINNET, MainnetV2EndpointId.EBI_V2_MAINNET],
  "flare": [MainnetEndpointId.FLARE_MAINNET, MainnetV2EndpointId.FLARE_V2_MAINNET],
  "homeverse": [MainnetEndpointId.HOMEVERSE_MAINNET, MainnetV2EndpointId.HOMEVERSE_V2_MAINNET],
  "bb1": [MainnetEndpointId.BB1_MAINNET, MainnetV2EndpointId.BB1_V2_MAINNET],
  "joc": [MainnetEndpointId.JOC_MAINNET, MainnetV2EndpointId.JOC_V2_MAINNET],
  "rarible": [MainnetEndpointId.RARIBLE_MAINNET, MainnetV2EndpointId.RARIBLE_V2_MAINNET],
  "taiko": [MainnetEndpointId.TAIKO_MAINNET, MainnetV2EndpointId.TAIKO_V2_MAINNET],
  "tiltyard": [MainnetEndpointId.TILTYARD_MAINNET, MainnetV2EndpointId.TILTYARD_V2_MAINNET],
  "tron": [MainnetEndpointId.TRON_MAINNET, MainnetV2EndpointId.TRON_V2_MAINNET],
  "xlayer": [MainnetEndpointId.XLAYER_MAINNET, MainnetV2EndpointId.XLAYER_V2_MAINNET],
  "xchain": [MainnetEndpointId.XCHAIN_MAINNET, MainnetV2EndpointId.XCHAIN_V2_MAINNET],
  "zircuit": [MainnetEndpointId.ZIRCUIT_MAINNET, MainnetV2EndpointId.ZIRCUIT_V2_MAINNET],
  "abstract-testnet": [TestnetEndpointId.ABSTRACT_TESTNET, TestnetV2EndpointId.ABSTRACT_V2_TESTNET],
  "zkastar-testnet": [TestnetEndpointId.ZKASTAR_TESTNET, TestnetV2EndpointId.ZKASTAR_V2_TESTNET],
  "bahamut-testnet": [TestnetEndpointId.BAHAMUT_TESTNET, TestnetV2EndpointId.BAHAMUT_V2_TESTNET],
  "base-sepolia": [TestnetEndpointId.BASESEP_TESTNET, TestnetV2EndpointId.BASESEP_V2_TESTNET],
  "bartio": [TestnetEndpointId.BARTIO_TESTNET, TestnetV2EndpointId.BARTIO_V2_TESTNET],
  "besu1-testnet": [TestnetEndpointId.BESU1_TESTNET, TestnetV2EndpointId.BESU1_V2_TESTNET],
  "blast-testnet": [TestnetEndpointId.BLAST_TESTNET, TestnetV2EndpointId.BLAST_V2_TESTNET],
  "bob-testnet": [TestnetEndpointId.BOB_TESTNET, TestnetV2EndpointId.BOB_V2_TESTNET],
  "botanix-testnet": [TestnetEndpointId.BOTANIX_TESTNET, TestnetV2EndpointId.BOTANIX_V2_TESTNET],
  "bouncebit-testnet": [TestnetEndpointId.BOUNCEBIT_TESTNET, TestnetV2EndpointId.BOUNCEBIT_V2_TESTNET],
  "camp-testnet": [TestnetEndpointId.CAMP_TESTNET, TestnetV2EndpointId.CAMP_V2_TESTNET],
  "canto-testnet": [TestnetEndpointId.CANTO_TESTNET, TestnetV2EndpointId.CANTO_V2_TESTNET],
  "codex": [MainnetEndpointId.CODEX_MAINNET, MainnetV2EndpointId.CODEX_V2_MAINNET],
  "codex-testnet": [TestnetEndpointId.CODEX_TESTNET, TestnetV2EndpointId.CODEX_V2_TESTNET],
  "conflux-testnet": [TestnetEndpointId.CONFLUX_TESTNET, TestnetV2EndpointId.CONFLUX_V2_TESTNET],
  "coredao-testnet": [TestnetEndpointId.COREDAO_TESTNET, TestnetV2EndpointId.COREDAO_V2_TESTNET],
  "curtis-testnet": [TestnetEndpointId.CURTIS_TESTNET, TestnetV2EndpointId.CURTIS_V2_TESTNET],
  "cyber": [MainnetEndpointId.CYBER_MAINNET, MainnetV2EndpointId.CYBER_V2_MAINNET],
  "cyber-testnet": [TestnetEndpointId.CYBER_TESTNET, TestnetV2EndpointId.CYBER_V2_TESTNET],
  "dfk-testnet": [TestnetEndpointId.DFK_TESTNET, TestnetV2EndpointId.DFK_V2_TESTNET],
  "dexalot-testnet": [TestnetEndpointId.DEXALOT_TESTNET, TestnetV2EndpointId.DEXALOT_V2_TESTNET],
  "dos-testnet": [TestnetEndpointId.DOS_TESTNET, TestnetV2EndpointId.DOS_V2_TESTNET],
  "ebi-testnet": [TestnetEndpointId.EBI_TESTNET, TestnetV2EndpointId.EBI_V2_TESTNET],
  "etherlink": [MainnetEndpointId.ETHERLINK_MAINNET, MainnetV2EndpointId.ETHERLINK_V2_MAINNET],
  "etherlink-testnet": [TestnetEndpointId.ETHERLINK_TESTNET, TestnetV2EndpointId.ETHERLINK_V2_TESTNET],
  "fi-testnet": [TestnetEndpointId.FI_TESTNET, TestnetV2EndpointId.FI_V2_TESTNET],
  "flare-testnet": [TestnetEndpointId.FLARE_TESTNET, TestnetV2EndpointId.FLARE_V2_TESTNET],
  "form-testnet": [TestnetEndpointId.FORM_TESTNET, TestnetV2EndpointId.FORM_V2_TESTNET],
  "fraxtal-testnet": [TestnetEndpointId.FRAXTAL_TESTNET, TestnetV2EndpointId.FRAXTAL_V2_TESTNET],
  "fusespark": [TestnetEndpointId.FUSE_TESTNET, TestnetV2EndpointId.FUSE_V2_TESTNET],
  "glue-testnet": [TestnetEndpointId.GLUE_TESTNET, TestnetV2EndpointId.GLUE_V2_TESTNET],
  "gunzilla-testnet": [TestnetEndpointId.GUNZILLA_TESTNET, TestnetV2EndpointId.GUNZILLA_V2_TESTNET],
  "hedera-testnet": [TestnetEndpointId.HEDERA_TESTNET, TestnetV2EndpointId.HEDERA_V2_TESTNET],
  "homeverse-testnet": [TestnetEndpointId.HOMEVERSE_TESTNET, TestnetV2EndpointId.HOMEVERSE_V2_TESTNET],
  "hubble": [MainnetEndpointId.HUBBLE_MAINNET, MainnetV2EndpointId.HUBBLE_V2_MAINNET],
  "iota-testnet": [TestnetEndpointId.IOTA_TESTNET, TestnetV2EndpointId.IOTA_V2_TESTNET],
  "joc-testnet": [TestnetEndpointId.JOC_TESTNET, TestnetV2EndpointId.JOC_V2_TESTNET],
  "kava-testnet": [TestnetEndpointId.KAVA_TESTNET, TestnetV2EndpointId.KAVA_V2_TESTNET],
  "klaytn-baobab": [TestnetEndpointId.KLAYTN_TESTNET, TestnetV2EndpointId.KLAYTN_V2_TESTNET],
  "lif3-testnet": [TestnetEndpointId.LIF3_TESTNET, TestnetV2EndpointId.LIF3_V2_TESTNET],
  "lightlink": [MainnetEndpointId.LIGHTLINK_MAINNET, MainnetV2EndpointId.LIGHTLINK_V2_MAINNET],
  "lightlink-testnet": [TestnetEndpointId.LIGHTLINK_TESTNET, TestnetV2EndpointId.LIGHTLINK_V2_TESTNET],
  "lineasep-testnet": [TestnetEndpointId.LINEASEP_TESTNET, TestnetV2EndpointId.LINEASEP_V2_TESTNET],
  "loot-testnet": [TestnetEndpointId.LOOT_TESTNET, TestnetV2EndpointId.LOOT_V2_TESTNET],
  "lyra": [MainnetEndpointId.LYRA_MAINNET, MainnetV2EndpointId.LYRA_V2_MAINNET],
  "lyra-testnet": [TestnetEndpointId.LYRA_TESTNET, TestnetV2EndpointId.LYRA_V2_TESTNET],
  "mantasep-testnet": [TestnetEndpointId.MANTASEP_TESTNET, TestnetV2EndpointId.MANTASEP_V2_TESTNET],
  "mantle-sepolia": [TestnetEndpointId.MANTLESEP_TESTNET, TestnetV2EndpointId.MANTLESEP_V2_TESTNET],
  "masa": [MainnetEndpointId.MASA_MAINNET, MainnetV2EndpointId.MASA_V2_MAINNET],
  "masa-testnet": [TestnetEndpointId.MASA_TESTNET, TestnetV2EndpointId.MASA_V2_TESTNET],
  "beam-testnet": [TestnetEndpointId.MOONBEAM_TESTNET, TestnetV2EndpointId.MOONBEAM_V2_TESTNET],
  "merlin": [MainnetEndpointId.MERLIN_MAINNET, MainnetV2EndpointId.MERLIN_V2_MAINNET],
  "merlin-testnet": [TestnetEndpointId.MERLIN_TESTNET, TestnetV2EndpointId.MERLIN_V2_TESTNET],
  "meter-testnet": [TestnetEndpointId.METER_TESTNET, TestnetV2EndpointId.METER_V2_TESTNET],
  "metissep-testnet": [TestnetEndpointId.METISSEP_TESTNET, TestnetV2EndpointId.METISSEP_V2_TESTNET],
  "mode-testnet": [TestnetEndpointId.MODE_TESTNET, TestnetV2EndpointId.MODE_V2_TESTNET],
  "morph-testnet": [TestnetEndpointId.MORPH_TESTNET, TestnetV2EndpointId.MORPH_V2_TESTNET],
  "okx-testnet": [TestnetEndpointId.OKX_TESTNET, TestnetV2EndpointId.OKX_V2_TESTNET],
  "olive-testnet": [TestnetEndpointId.OLIVE_TESTNET, TestnetV2EndpointId.OLIVE_V2_TESTNET],
  "opbnb-testnet": [TestnetEndpointId.OPBNB_TESTNET, TestnetV2EndpointId.OPBNB_V2_TESTNET],
  "opencampus-testnet": [TestnetEndpointId.OPENCAMPUS_TESTNET, TestnetV2EndpointId.OPENCAMPUS_V2_TESTNET],
  "orderly-testnet": [TestnetEndpointId.ORDERLY_TESTNET, TestnetV2EndpointId.ORDERLY_V2_TESTNET],
  "otherworld-testnet": [TestnetEndpointId.OTHERWORLD_TESTNET, TestnetV2EndpointId.OTHERWORLD_V2_TESTNET],
  "peaq-testnet": [TestnetEndpointId.PEAQ_TESTNET, TestnetV2EndpointId.PEAQ_V2_TESTNET],
  "plume-testnet": [TestnetEndpointId.PLUME_TESTNET, TestnetV2EndpointId.PLUME_V2_TESTNET],
  "amoy-testnet": [TestnetEndpointId.AMOY_TESTNET, TestnetV2EndpointId.AMOY_V2_TESTNET],
  "zkpolygon-sepolia": [TestnetEndpointId.ZKPOLYGON_TESTNET, TestnetV2EndpointId.ZKPOLYGONSEP_V2_TESTNET],
  "real": [MainnetEndpointId.REAL_MAINNET, MainnetV2EndpointId.REAL_V2_MAINNET],
  "reya-testnet": [TestnetEndpointId.REYA_TESTNET, TestnetV2EndpointId.REYA_V2_TESTNET],
  "root-testnet": [TestnetEndpointId.ROOT_TESTNET, TestnetV2EndpointId.ROOT_V2_TESTNET],
  "sanko": [MainnetEndpointId.SANKO_MAINNET, MainnetV2EndpointId.SANKO_V2_MAINNET],
  "sanko-testnet": [TestnetEndpointId.SANKO_TESTNET, TestnetV2EndpointId.SANKO_V2_TESTNET],
  "sei-testnet": [TestnetEndpointId.SEI_TESTNET, TestnetV2EndpointId.SEI_V2_TESTNET],
  "skale": [MainnetEndpointId.SKALE_MAINNET, MainnetV2EndpointId.SKALE_V2_MAINNET],
  "skale-testnet": [TestnetEndpointId.SKALE_TESTNET, TestnetV2EndpointId.SKALE_V2_TESTNET],
  "solana-testnet": [TestnetEndpointId.SOLANA_TESTNET, TestnetV2EndpointId.SOLANA_V2_TESTNET],
  "taiko-testnet": [TestnetEndpointId.TAIKO_TESTNET, TestnetV2EndpointId.TAIKO_V2_TESTNET],
  "tangible-testnet": [TestnetEndpointId.TANGIBLE_TESTNET, TestnetV2EndpointId.TANGIBLE_V2_TESTNET],
  "telos-testnet": [TestnetEndpointId.TELOS_TESTNET, TestnetV2EndpointId.TELOS_V2_TESTNET],
  "tenet-testnet": [TestnetEndpointId.TENET_TESTNET, TestnetV2EndpointId.TENET_V2_TESTNET],
  "treasure-testnet": [TestnetEndpointId.TREASURE_TESTNET, TestnetV2EndpointId.TREASURE_V2_TESTNET],
  "tron-testnet": [TestnetEndpointId.TRON_TESTNET, TestnetV2EndpointId.TRON_V2_TESTNET],
  "unreal-testnet": [TestnetEndpointId.UNREAL_TESTNET, TestnetV2EndpointId.UNREAL_V2_TESTNET],
  "vanguard-testnet": [TestnetEndpointId.MODE_TESTNET, TestnetV2EndpointId.MODE_V2_TESTNET],
  "xlayer-testnet": [TestnetEndpointId.XLAYER_TESTNET, TestnetV2EndpointId.XLAYER_V2_TESTNET],
  "xai-testnet": [TestnetEndpointId.XAI_TESTNET, TestnetV2EndpointId.XAI_V2_TESTNET],
  "xchain-testnet": [TestnetEndpointId.XCHAIN_TESTNET, TestnetV2EndpointId.XCHAIN_V2_TESTNET],
  "xpla-testnet": [TestnetEndpointId.XPLA_TESTNET, TestnetV2EndpointId.XPLA_V2_TESTNET],
  "zircuit-testnet": [TestnetEndpointId.ZIRCUIT_TESTNET, TestnetV2EndpointId.ZIRCUIT_V2_TESTNET],
  "zklink-testnet": [TestnetEndpointId.ZKLINK_TESTNET, TestnetV2EndpointId.ZKLINK_V2_TESTNET],
  "zksync-sepolia": [TestnetEndpointId.ZKSYNC_TESTNET, TestnetV2EndpointId.ZKSYNCSEP_V2_TESTNET],
  "zora-sepolia": [TestnetEndpointId.ZORA_TESTNET, TestnetV2EndpointId.ZORASEP_V2_TESTNET],
  "alfajores": [TestnetEndpointId.CELO_TESTNET, TestnetV2EndpointId.CELO_V2_TESTNET]
}

export const DVNS = Object.keys(DVN_DEPLOYMENT)
  .sort((a, b) => (a === "BCW_Group" ? -1 : b === "BCW_Group" ? 1 : 0))
  .map((key) => {
    return {
      [key]:
        Object.keys(DVN_DEPLOYMENT[key]).map((network) => {
          const networkIds = NETWORK_MAP[network];
          if (!networkIds) return {};
          return networkIds
            .map((networkId) => { return { [+networkId]: DVN_DEPLOYMENT[key][network] } })
            .reduce((acc, val) => { return { ...acc, ...val } }, {})
        }).reduce((acc, val) => { return { ...acc, ...val } }, {})
    }
  }).reduce((acc, val) => { return { ...acc, ...val } }, {});